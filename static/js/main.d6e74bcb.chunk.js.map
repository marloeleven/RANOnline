{"version":3,"sources":["app/store.ts","api/gsheets.ts","hooks/useFetch.ts","hooks/useEffectOnce.ts","app/slices/app.ts","app/epics/app.ts","app/slices/boss.ts","types/index.ts","containers/errorboundary.tsx","containers/loader.tsx","data/boss.ts","utils/index.ts","handlers/subscription.ts","hooks/useGetTime.ts","components/selected.tsx","components/boss.tsx","containers/main.tsx","App.tsx","index.tsx"],"names":["history","DEFAULT_OPTIONS","sheetId","returnAllResults","options","Promise","resolve","reject","GSheets","e","promise","callback","useState","status","setStatus","result","setResult","suspender","setSuspender","promiseResult","then","res","catch","useEffect","read","appSlice","createSlice","name","initialState","loggedIn","accessToken","reducers","setLoginState","state","payload","produce","draft","actions","combineEpics","action$","state$","pipe","ofType","appActions","switchMap","defer","empty","bossSlice","bossList","setBossList","rootEpic","appEpic","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","app","appReducer","boss","bossReducer","epicMiddleware","createEpicMiddleware","store","configureStore","middleware","getDefaultMiddleware","routerMiddleware","reducer","run","UserType","IMaps","IStatus","ErrorBoundary","hasError","error","errorInfo","this","props","children","console","log","Component","className","CircularProgress","Typography","variant","color","date","initialDate","Date","id","map","PY","respawn_time","last_killed","SG_HOLE","SHIBUYA","MP_HOLE","PNX_HOLE","SG_CAMPUS","MP_CAMPUS","PNX_CAMPUS","format2digits","time","slice","initialServerTime","getSpawnTime","getHours","getMinutes","split","Number","addHr","addMin","getTime","copyObject","anyObject","JSON","parse","stringify","updateTime$","Subject","updateInterval$","throttleTime","interval","subscribe","next","saveToLocalStorage$","data","distinctUntilChanged","window","localStorage","setItem","concatMap","msg","SpeechSynthesisUtterance","speechSynthesis","speak","serverTime","hour","setHour","minute","setMinute","NORMAL","respawnTime","interval$","newTime","diff","totalMinutes","Math","floor","remainingMinutes","remainingHours","BE_READY","ACTIVE","unsubscribe","useStyles","makeStyles","theme","container","minWidth","textField","marginLeft","spacing","marginRight","width","SelectedBoss","classes","appContext","useContext","AppContext","useGetTime","onChangeDate","useCallback","updateKillTime","onKilled","cx","label","mask","value","onChange","Button","onClick","Boss","display","flexWrap","textAlign","defaultBoss","Main","selectedBossId","setSelectedBossId","onReset","onResetAllTime","selectedBoss","useMemo","find","changeServerTime","setServerTime","length","DateTimePicker","inputVariant","resetStyle","onExport","sort","bossA","bossB","sortBoss","key","selected","css","React","createContext","noop","App","fetchBossList","list","bossListArray","b","navigator","clipboard","writeText","exportData","Array","isArray","config","json","warn","bossListConst","parseApiSavedData","localConfig","getItem","getLocalConfigData","localData","dbTime","lsTime","Provider","utils","DateFnsUtils","useFetch","gsheets","StrictMode","basename","fallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6e74bcb.chunk.js","sourcesContent":["import {\r\n  Action,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  ThunkAction,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport { createBrowserHistory, History } from 'history';\r\nimport { useDispatch } from 'react-redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\n\r\nimport appEpic from './epics/app';\r\nimport appReducer from './slices/app';\r\nimport bossReducer from './slices/boss';\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n\r\nconst rootEpic = combineEpics(appEpic);\r\n\r\nconst createRootReducer = (history: History<any>) =>\r\n  combineReducers({\r\n    router: connectRouter(history),\r\n    app: appReducer,\r\n    boss: bossReducer,\r\n  });\r\n\r\nexport const history = createBrowserHistory();\r\nconst rootReducer = createRootReducer(history);\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst epicMiddleware = createEpicMiddleware<Action, Action, RootState>();\r\n\r\nexport const store = configureStore({\r\n  middleware: [\r\n    ...getDefaultMiddleware(),\r\n    epicMiddleware,\r\n    routerMiddleware(history),\r\n  ],\r\n  reducer: rootReducer,\r\n});\r\n\r\nepicMiddleware.run(rootEpic);\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import GSheets from 'g-sheets-api';\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  sheetId: '1bd_TnHwz14F-0Lq6xnCY70b7VIWudhofzv_aTUsJt2w',\r\n  returnAllResults: true,\r\n};\r\n\r\nexport default (options = DEFAULT_OPTIONS) =>\r\n  new Promise((resolve, reject) => {\r\n    try {\r\n      GSheets({ ...DEFAULT_OPTIONS, ...options }, resolve);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n","import { useState } from 'react';\r\nimport useEffectOnce from 'hooks/useEffectOnce';\r\n\r\nconst LOADING = 'loading';\r\nconst ERROR = 'error';\r\nconst SUCCESS = 'success';\r\n\r\nexport interface IFetch {\r\n  read: Function;\r\n  result: any;\r\n}\r\n\r\nexport default (promise: any): IFetch => {\r\n  const [status, setStatus] = useState<string>(LOADING);\r\n  const [result, setResult] = useState<any>();\r\n  const [suspender, setSuspender] = useState<Promise<any>>(\r\n    new Promise(() => {})\r\n  );\r\n\r\n  useEffectOnce(() => {\r\n    const promiseResult = promise()\r\n      .then((res: any) => {\r\n        setResult(res);\r\n\r\n        setStatus(SUCCESS);\r\n      })\r\n      .catch((e: Error) => {\r\n        setResult(e);\r\n        setStatus(ERROR);\r\n      });\r\n\r\n    setSuspender(promiseResult);\r\n  });\r\n\r\n  return {\r\n    read: () => {\r\n      switch (status) {\r\n        case LOADING:\r\n          throw suspender;\r\n        case ERROR:\r\n          throw result;\r\n        case SUCCESS:\r\n        default:\r\n          return result;\r\n      }\r\n    },\r\n    result,\r\n  };\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nexport default (callback: React.EffectCallback) =>\r\n  useEffect(() => callback(), []);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'app/store';\r\n\r\nimport produce from 'immer';\r\n\r\ninterface AppState {\r\n  loggedIn: boolean;\r\n  accessToken: string;\r\n}\r\n\r\nconst initialState: AppState = {\r\n  loggedIn: false,\r\n  accessToken: '',\r\n};\r\n\r\ninterface ISetLoginStateArgs {\r\n  accessToken: string;\r\n}\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    setLoginState: (\r\n      state,\r\n      { payload: { accessToken } }: PayloadAction<ISetLoginStateArgs>\r\n    ) => {\r\n      return produce(state, (draft) => {\r\n        draft.accessToken = accessToken;\r\n        draft.loggedIn = true;\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLoginState } = appSlice.actions;\r\n\r\nexport const get = {\r\n  loggedIn: (state: RootState) => state.app.loggedIn,\r\n};\r\n\r\nexport default appSlice.reducer;\r\n","import { Action } from '@reduxjs/toolkit';\r\nimport { RootState } from 'app/store';\r\n// import { push } from 'connected-react-router';\r\n\r\nimport { combineEpics, Epic, ofType } from 'redux-observable';\r\nimport { defer, empty } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nimport * as appActions from 'app/slices/app';\r\n\r\nconst setLoginEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setLoginState),\r\n    switchMap(() =>\r\n      defer(() => Promise.resolve(true)).pipe(switchMap(() => empty()))\r\n    )\r\n  );\r\n/*\r\nSample page redirection after triggering an action\r\n\r\nconst setPagesEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setPages),\r\n    switchMap(() => of(push('/pages')))\r\n  );\r\n\r\n\r\nSample\r\nconst setPageIdEpic: Epic<Action, Action, RootState> = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(appActions.setPageId),\r\n    switchMap(() =>\r\n      defer(() => {\r\n        const { pageId, pageAccessToken: accessToken } = state$.value.app;\r\n\r\n        if (!isEmpty(pageId)) {\r\n          return fbApi.getLiveVideos(pageId, accessToken);\r\n        }\r\n\r\n        return [];\r\n      }).pipe(\r\n        switchMap((liveVideos) => {\r\n          return of(appActions.setLiveVideos(liveVideos));\r\n        })\r\n      )\r\n    )\r\n  );\r\n\r\n*/\r\n\r\nexport default combineEpics(setLoginEpic);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from 'app/store';\r\n\r\nimport { IBoss } from 'types';\r\n\r\ninterface AppState {\r\n  bossList: IBoss[];\r\n}\r\n\r\nconst initialState: AppState = {\r\n  bossList: [],\r\n};\r\n\r\nexport const bossSlice = createSlice({\r\n  name: 'boss',\r\n  initialState,\r\n  reducers: {\r\n    setBossList: (state, { payload: bossList }: PayloadAction<IBoss[]>) => {\r\n      state.bossList = bossList;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setBossList } = bossSlice.actions;\r\n\r\nexport const get = {\r\n  bossList: (state: RootState) => state.boss.bossList,\r\n};\r\n\r\nexport default bossSlice.reducer;\r\n","declare global {\r\n  interface Window {\r\n    test: any;\r\n    FB: {\r\n      init: Function;\r\n    };\r\n  }\r\n}\r\n\r\nexport type userId = string;\r\n\r\nexport interface UserInfo {\r\n  name: string;\r\n  type: UserType;\r\n}\r\n\r\nexport enum UserType {\r\n  ADMIN = 'admin',\r\n  USER = 'user',\r\n}\r\n\r\nexport enum IMaps {\r\n  SG_CAMPUS = 'SG Campus',\r\n  MP_CAMPUS = 'MP Campus',\r\n  PNX_CAMPUS = 'PNX Campus',\r\n  SG_HOLE = 'SG Hole',\r\n  MP_HOLE = 'MP Hole',\r\n  PNX_HOLE = 'PNX Hole',\r\n  SHIBUYA = 'Shibuya',\r\n  PY = 'Practicing Yard',\r\n}\r\nexport interface IBoss {\r\n  id: string;\r\n  name: string;\r\n  map: IMaps;\r\n  desciption?: string;\r\n  respawn_time: string;\r\n  last_killed: Date;\r\n}\r\nexport interface IBossJSON {\r\n  id: string;\r\n  name: string;\r\n  map: string;\r\n  desciption?: string;\r\n  respawn_time: string;\r\n  last_killed: number;\r\n}\r\n\r\nexport interface IBossTimed extends IBoss {\r\n  hour: number;\r\n  minute: number;\r\n}\r\n\r\nexport enum IStatus {\r\n  NORMAL = 'normal',\r\n  BE_READY = 'be_ready',\r\n  ACTIVE = 'active',\r\n}\r\n","import React, { Component } from 'react';\r\n\r\ninterface IState {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component {\r\n  state: IState = {\r\n    hasError: false,\r\n  };\r\n\r\n  static getDerivedStateFromError(error: Error) {\r\n    console.log(error);\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error: any, errorInfo: any) {\r\n    // You can also log the error to an error reporting service\r\n    // logErrorToMyService(error, errorInfo);\r\n    // console.error(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default () => (\r\n  <div className=\"absolute top-0 h-full w-full flex justify-center items-center bg-black bg-opacity-50 flex-col\">\r\n    <CircularProgress />\r\n    <Typography variant=\"button\" color=\"inherit\" className=\"pt-4\">\r\n      Loading...\r\n    </Typography>\r\n  </div>\r\n);\r\n","import { IBoss, IMaps } from 'types';\r\n\r\nconst initialDate = new Date();\r\n\r\nexport default [\r\n  {\r\n    id: 'cjpy',\r\n    name: 'Cruel Jupiter (CJ)',\r\n    map: IMaps.PY,\r\n    respawn_time: '8:00',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'nksgh',\r\n    name: 'Ninja Knife (NK)',\r\n    map: IMaps.SG_HOLE,\r\n    respawn_time: '2:00',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dssgh',\r\n    name: 'Dark Swordsman (DS)',\r\n    map: IMaps.SG_HOLE,\r\n    respawn_time: '2:00',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'nksh',\r\n    name: 'Ninja Knife (NK)',\r\n    map: IMaps.SHIBUYA,\r\n    respawn_time: '1:15',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'efsgh',\r\n    name: 'Etherial Fist (EF)',\r\n    map: IMaps.SG_HOLE,\r\n    respawn_time: '2:00',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'efmph',\r\n    name: 'Etherial Fist (EF)',\r\n    map: IMaps.MP_HOLE,\r\n    respawn_time: '2:00',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'efpxh',\r\n    name: 'Etherial Fist (EF)',\r\n    map: IMaps.PNX_HOLE,\r\n    respawn_time: '2:00',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dsjsgh',\r\n    name: 'Dark Swordsman Jr (DS jr)',\r\n    map: IMaps.SG_HOLE,\r\n    respawn_time: '0:30',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dsjmph',\r\n    name: 'Dark Swordsman Jr (DS jr)',\r\n    map: IMaps.MP_HOLE,\r\n    respawn_time: '0:30',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dsjpx',\r\n    name: 'Dark Swordsman Jr (DS jr)',\r\n    map: IMaps.PNX_HOLE,\r\n    respawn_time: '0:30',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dsjsgc',\r\n    name: 'Dark Swordsman Jr (DS jr)',\r\n    map: IMaps.SG_CAMPUS,\r\n    respawn_time: '0:30',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dsjmpc',\r\n    name: 'Dark Swordsman Jr (DS jr)',\r\n    map: IMaps.MP_CAMPUS,\r\n    respawn_time: '0:30',\r\n    last_killed: initialDate,\r\n  },\r\n  {\r\n    id: 'dsjpxc',\r\n    name: 'Dark Swordsman Jr (DS jr)',\r\n    map: IMaps.PNX_CAMPUS,\r\n    respawn_time: '0:30',\r\n    last_killed: initialDate,\r\n  },\r\n] as IBoss[];\r\n","import { IBoss, IBossJSON } from 'types';\r\nimport bossListConst from 'data/boss';\r\n\r\nexport const date = new Date();\r\n\r\nconst getInitialServerTime = (date: Date) => {\r\n  const d = date.toISOString();\r\n\r\n  return d.slice(0, d.lastIndexOf(':'));\r\n};\r\n\r\nexport const format2digits = (time: number) => `00${time}`.slice(-2);\r\n\r\nconst getInitialTime = (date: Date) =>\r\n  `${format2digits(date.getHours())}:${format2digits(date.getMinutes())}`;\r\n\r\nexport const initialServerTime = date;\r\nexport const initialTime = getInitialTime(date);\r\n\r\nconst addHours = (date: Date, hours: number) =>\r\n  new Date(date.getTime() + hours * 60 * 60 * 1000);\r\n\r\nconst addMinutes = (date: Date, mins: number) =>\r\n  new Date(date.getTime() + mins * 60 * 1000);\r\n\r\nconst extraceTime = (time: string): [number, number] => {\r\n  const [hours, minutes] = time.split(':');\r\n\r\n  return [Number(hours), Number(minutes)];\r\n};\r\n\r\nexport const convertDateToStringTime = (date: Date) =>\r\n  `${format2digits(date.getHours())}:${format2digits(date.getMinutes())}`;\r\n\r\nconst addTime = (date: Date, respawn_time: string) => {\r\n  const [hours, minutes] = extraceTime(respawn_time);\r\n\r\n  return new Date(addMinutes(addHours(date, hours), minutes));\r\n};\r\n\r\nconst sort = (a: IBoss, b: IBoss) => {\r\n  // if (a.next_spawn_time < b.next_spawn_time) {\r\n  //   return -1;\r\n  // }\r\n  // return 1;\r\n};\r\n\r\nexport const getUpdatedHourMinute = (\r\n  next_spawn_time: Date,\r\n  serverTime: Date\r\n) => {\r\n  const diff =\r\n    Math.abs(next_spawn_time.getTime() - serverTime.getTime()) / 36e5;\r\n\r\n  const hour = Math.floor(diff);\r\n\r\n  const minute = Math.floor((diff - hour) * 60);\r\n\r\n  return [hour, minute ? minute - 1 : minute];\r\n};\r\n\r\ninterface ISpawnTime extends Partial<IBoss> {\r\n  respawn_time: string;\r\n  last_killed: Date;\r\n}\r\n\r\nexport const getSpawnTime = ({ respawn_time, last_killed }: ISpawnTime) => {\r\n  const [hr, min] = respawn_time.split(':').map(Number);\r\n\r\n  const addHr = hr * 60 * 60 * 1000;\r\n  const addMin = min * 60 * 1000;\r\n\r\n  return new Date(last_killed.getTime() + (addHr + addMin));\r\n};\r\n\r\nexport const sortBoss = (bossList: IBoss[]) => {\r\n  return bossList.slice(0).sort((bossA, bossB) => {\r\n    const aDate = getSpawnTime(bossA).getTime();\r\n    const bDate = getSpawnTime(bossB).getTime();\r\n\r\n    return aDate - bDate;\r\n  });\r\n};\r\n\r\nexport const cleanString = (str: string) =>\r\n  str.toLowerCase().replace(/\\W/g, '');\r\n\r\nexport const copyObject = (anyObject: Object | []) =>\r\n  JSON.parse(JSON.stringify(anyObject));\r\n\r\nexport const exportData = (bossListArray: IBoss[], serverTime: Date) => {\r\n  const bossList = (copyObject(bossListArray) as IBossJSON[]).map((b) => {\r\n    b.last_killed = new Date(b.last_killed).getTime();\r\n\r\n    return b;\r\n  });\r\n\r\n  navigator.clipboard.writeText(\r\n    JSON.stringify({\r\n      serverTime: serverTime.getTime(),\r\n      bossList,\r\n    })\r\n  );\r\n};\r\n\r\nexport const parseApiSavedData = (json: string) => {\r\n  try {\r\n    const config = JSON.parse(json);\r\n\r\n    return {\r\n      serverTime: new Date(config.serverTime),\r\n      bossList: config.bossList.map((boss: IBoss) => {\r\n        boss.last_killed = new Date(boss.last_killed);\r\n        return boss;\r\n      }),\r\n    };\r\n  } catch (e) {\r\n    console.warn('error', e);\r\n    return {\r\n      serverTime: date,\r\n      bossList: bossListConst,\r\n    };\r\n  }\r\n};\r\n\r\nexport const getLocalConfigData = () => {\r\n  const config = window.localStorage.getItem('config') || '';\r\n  try {\r\n    const { serverTime, bossList } = JSON.parse(config);\r\n\r\n    return {\r\n      serverTime,\r\n      bossList,\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      serverTime: date,\r\n      bossList: [],\r\n    };\r\n  }\r\n};\r\n","import { empty, interval, Subject } from 'rxjs';\r\nimport {\r\n  concatMap,\r\n  distinctUntilChanged,\r\n  map,\r\n  throttleTime,\r\n} from 'rxjs/operators';\r\nimport { IBoss } from 'types';\r\n\r\nconst SECONDS_5 = 5 * 1000;\r\n\r\nexport const updateTime$ = new Subject();\r\n\r\nexport const updateInterval$ = updateTime$.pipe(\r\n  throttleTime(SECONDS_5),\r\n  map(() => new Date())\r\n);\r\n\r\ninterval(SECONDS_5).subscribe(() => updateTime$.next());\r\n\r\nexport const saveToLocalStorage$ = new Subject();\r\n\r\ninterface ISaveLocalStorage {\r\n  serverTime: Date;\r\n  bossList: IBoss[];\r\n}\r\nsaveToLocalStorage$\r\n  .pipe(\r\n    map((data) => JSON.stringify(data as ISaveLocalStorage)),\r\n    distinctUntilChanged(),\r\n    throttleTime(SECONDS_5)\r\n  )\r\n  .subscribe((data) => {\r\n    window.localStorage.setItem('config', data);\r\n  });\r\n\r\nexport const announcement$ = new Subject();\r\n\r\ninterface IBossAnnouncement {\r\n  time: number;\r\n  boss: IBoss;\r\n}\r\n\r\nannouncement$\r\n  .pipe(\r\n    map((data) => data as IBossAnnouncement),\r\n    concatMap(({ boss, time }: IBossAnnouncement) => {\r\n      const msg = new SpeechSynthesisUtterance(\r\n        `${boss.name} will spawn at ${boss.map} after ${time} minutes`\r\n      );\r\n      window.speechSynthesis.speak(msg);\r\n\r\n      return empty();\r\n    })\r\n  )\r\n  .subscribe(() => {});\r\n","import {\r\n  updateInterval$,\r\n  updateTime$,\r\n  announcement$,\r\n} from 'handlers/subscription';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { IBoss, IStatus } from 'types';\r\nimport { getSpawnTime } from 'utils';\r\n\r\nconst MINUTE_1_MS = 60 * 1000; // in milliseconds\r\nconst HOUR_1 = 60; // 1 hour\r\n\r\nexport default (boss: IBoss, serverTime: Date) => {\r\n  const [hour, setHour] = useState(1);\r\n  const [minute, setMinute] = useState(2);\r\n  const [status, setStatus] = useState<IStatus>(IStatus.NORMAL);\r\n\r\n  useEffect(() => {\r\n    const respawnTime = getSpawnTime({\r\n      respawn_time: boss.respawn_time,\r\n      last_killed: boss.last_killed,\r\n    });\r\n\r\n    const interval$ = updateInterval$.subscribe((newTime) => {\r\n      const diff = respawnTime.getTime() - newTime.getTime();\r\n\r\n      if (diff >= MINUTE_1_MS) {\r\n        const totalMinutes = Math.floor(diff / MINUTE_1_MS);\r\n\r\n        if (totalMinutes >= HOUR_1) {\r\n          const remainingMinutes = Math.floor(totalMinutes % HOUR_1);\r\n          const remainingHours = Math.floor(totalMinutes / HOUR_1);\r\n\r\n          setHour(remainingHours);\r\n          setMinute(remainingMinutes);\r\n          setStatus(IStatus.NORMAL);\r\n\r\n          return;\r\n        }\r\n\r\n        setHour(0);\r\n        setMinute(Math.floor(totalMinutes));\r\n\r\n        if (totalMinutes <= 5) {\r\n          setStatus(IStatus.BE_READY);\r\n          return;\r\n        }\r\n\r\n        setStatus(IStatus.NORMAL);\r\n        return;\r\n      }\r\n\r\n      setHour(0);\r\n      setMinute(0);\r\n      setStatus(IStatus.ACTIVE);\r\n      return;\r\n    });\r\n\r\n    updateTime$.next();\r\n\r\n    return () => interval$.unsubscribe();\r\n  }, [boss.name, boss.last_killed, boss.respawn_time, serverTime]);\r\n\r\n  return { hour, minute, status };\r\n};\r\n","import React, { useCallback, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { KeyboardTimePicker } from '@material-ui/pickers';\r\n\r\nimport { IBoss } from 'types';\r\nimport { cx } from 'emotion';\r\n\r\nimport { AppContext } from 'App';\r\nimport useGetTime from 'hooks/useGetTime';\r\nimport { format2digits } from 'utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    minWidth: '400px',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 130,\r\n  },\r\n}));\r\n\r\ninterface IProps {\r\n  boss: IBoss;\r\n}\r\n\r\nexport default function SelectedBoss({ boss }: IProps) {\r\n  const classes = useStyles();\r\n\r\n  const appContext = useContext(AppContext);\r\n\r\n  const { hour, minute } = useGetTime(boss, appContext.serverTime);\r\n\r\n  const onChangeDate = useCallback(\r\n    (date) => {\r\n      appContext.updateKillTime(boss.id, date);\r\n    },\r\n    [boss.id, appContext]\r\n  );\r\n\r\n  const onKilled = useCallback(() => {\r\n    appContext.updateKillTime(boss.id, new Date());\r\n  }, [appContext, boss.id]);\r\n\r\n  return (\r\n    <div\r\n      className={cx(\r\n        classes.container,\r\n        'selected-record flex flex-row shadow-lg py-4 px-6 rounded-md'\r\n      )}\r\n    >\r\n      <ul className=\"w-full\">\r\n        <li className=\"text-xl\">{boss.name}</li>\r\n        <li className=\"text-xs text-gray-600\">\r\n          Respawn Time: {boss.respawn_time}\r\n        </li>\r\n        <li className=\"text-xs text-gray-600\">{boss.map}</li>\r\n        <li className=\"mt-4\">\r\n          <KeyboardTimePicker\r\n            label=\"Last Killed\"\r\n            mask=\"__:__ _M\"\r\n            value={boss.last_killed}\r\n            onChange={onChangeDate}\r\n            className={classes.textField}\r\n          />\r\n        </li>\r\n      </ul>\r\n      <div className=\"right flex flex-col ml-8\">\r\n        <div className=\"timer flex flex-row text-center mb-8\">\r\n          <ul className=\"pr-2\">\r\n            <li className=\"text-3xl\">{format2digits(hour)}</li>\r\n            <li className=\"text-xs text-gray-600\">hour</li>\r\n          </ul>\r\n          <ul>\r\n            <li className=\"text-3xl\">{format2digits(minute)}</li>\r\n            <li className=\"text-xs text-gray-600\">minute</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={onKilled}>\r\n          Killed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\n\r\nimport { format2digits } from 'utils';\r\nimport { IBoss } from 'types';\r\n\r\nimport useGetTime from 'hooks/useGetTime';\r\n\r\nimport { AppContext } from 'App';\r\n\r\nconst Boss = (boss: IBoss) => {\r\n  const appContext = useContext(AppContext);\r\n\r\n  const { hour, minute, status } = useGetTime(boss, appContext.serverTime);\r\n\r\n  return (\r\n    <div\r\n      className={`selected-record flex flex-row shadow-sm py-4 px-6 rounded-md ${status}`}\r\n    >\r\n      <ul className=\"mr-8  w-full\">\r\n        <li className=\"text-sm\">{boss.name}</li>\r\n        <li className=\"text-xs text-gray-600\">{boss.map}</li>\r\n      </ul>\r\n      <div className=\"right flex flex-col ml-4\">\r\n        <div className=\"timer flex flex-row text-center\">\r\n          <ul className=\"pr-2\">\r\n            <li className=\"text-xl\">{format2digits(hour)}</li>\r\n            <li className=\"text-xs text-gray-600\">hour</li>\r\n          </ul>\r\n          <ul>\r\n            <li className=\"text-xl\">{format2digits(minute)}</li>\r\n            <li className=\"text-xs text-gray-600\">minute</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boss;\r\n","import React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\n\r\nimport { initialServerTime, sortBoss } from 'utils';\r\n\r\nimport SelectedBoss from 'components/selected';\r\nimport Boss from 'components/boss';\r\nimport { IBoss, IMaps } from 'types';\r\n\r\nimport { css, cx } from 'emotion';\r\n\r\nimport { AppContext } from 'App';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(0),\r\n    marginRight: theme.spacing(0),\r\n    width: 300,\r\n    textAlign: 'center',\r\n  },\r\n}));\r\n\r\ninterface IMainArgs {\r\n  bossList: IBoss[];\r\n}\r\n\r\nconst defaultBoss: IBoss = {\r\n  id: 'default',\r\n  name: 'Unknown',\r\n  map: IMaps.SHIBUYA,\r\n  respawn_time: '0:00',\r\n  last_killed: initialServerTime,\r\n};\r\n\r\nexport default function Main({ bossList }: IMainArgs) {\r\n  const classes = useStyles();\r\n  const [selectedBossId, setSelectedBossId] = useState(defaultBoss.id);\r\n\r\n  const appContext = useContext(AppContext);\r\n\r\n  const onReset = useCallback(() => {\r\n    appContext.onResetAllTime();\r\n  }, [appContext]);\r\n\r\n  const selectedBoss = useMemo(() => {\r\n    const boss = bossList.find((boss) => boss.id === selectedBossId);\r\n    if (boss) {\r\n      return boss;\r\n    }\r\n\r\n    return defaultBoss;\r\n  }, [bossList, selectedBossId]);\r\n\r\n  const changeServerTime = useCallback(\r\n    (date) => {\r\n      if (date) {\r\n        appContext.setServerTime(new Date(date));\r\n      }\r\n    },\r\n    [appContext]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (bossList.length && selectedBossId === defaultBoss.id) {\r\n      setSelectedBossId(bossList[0].id);\r\n    }\r\n  }, [bossList, selectedBossId]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col mt-2 ml-2\">\r\n      <DateTimePicker\r\n        label=\"Server Up Time\"\r\n        inputVariant=\"outlined\"\r\n        value={appContext.serverTime}\r\n        onChange={changeServerTime}\r\n        className={classes.textField}\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={onReset}\r\n        className={resetStyle}\r\n      >\r\n        Reset All Time\r\n      </Button>\r\n\r\n      <div className=\"flex flex-row mt-8\">\r\n        <div className=\"flex flex-col mr-4\">\r\n          <h1 className=\"text-sm text-gray-600 mb-4\">Selected Record</h1>\r\n          <SelectedBoss boss={selectedBoss} />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            onClick={() => appContext.onExport()}\r\n            className={resetStyle}\r\n          >\r\n            Export Data\r\n          </Button>\r\n        </div>\r\n        <div className=\"list\">\r\n          <h1 className=\"text-sm text-gray-600 mb-4\">Boss Spawn List:</h1>\r\n          <ul className=\"shadow-lg py-4 px-4\">\r\n            {sortBoss(bossList).map((boss) => (\r\n              <li\r\n                key={boss.id}\r\n                onClick={() => setSelectedBossId(boss.id)}\r\n                className={cx({ selected: selectedBossId === boss.id })}\r\n              >\r\n                <Boss {...boss} />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst resetStyle = css(`\r\n  width: 150px;\r\n  margin-top: 10px !important;\r\n`);\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport Main from 'containers/main';\r\nimport readFetch from 'hooks/readFetch';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport {\r\n  copyObject,\r\n  exportData,\r\n  getLocalConfigData,\r\n  initialServerTime,\r\n  parseApiSavedData,\r\n} from 'utils';\r\nimport { noop } from 'lodash';\r\nimport { IBoss, IBossJSON } from 'types';\r\nimport produce from 'immer';\r\nimport { IFetch } from 'hooks/useFetch';\r\nimport { saveToLocalStorage$ } from 'handlers/subscription';\r\n\r\nexport type IEventCallbackVoid = (event: any) => void;\r\ninterface IAppContext {\r\n  serverTime: Date;\r\n  setServerTime: Function;\r\n  updateKillTime: Function;\r\n  onExport: Function;\r\n  onResetAllTime: Function;\r\n}\r\n\r\nexport const AppContext = React.createContext<IAppContext>({\r\n  serverTime: initialServerTime,\r\n  setServerTime: noop,\r\n  updateKillTime: noop,\r\n  onExport: noop,\r\n  onResetAllTime: noop,\r\n});\r\n\r\ninterface IAppArgs {\r\n  fetchBossList: IFetch;\r\n}\r\n\r\nconst App: React.FC<IAppArgs> = ({ fetchBossList }) => {\r\n  const [serverTime, setServerTime] = useState(initialServerTime);\r\n\r\n  const [bossList, setBossList] = useState<IBoss[]>([]);\r\n\r\n  const updateKillTime = useCallback((id, date) => {\r\n    setBossList(\r\n      produce((list: IBoss[]) => {\r\n        const boss = list.find((boss) => boss.id === id);\r\n\r\n        if (boss) {\r\n          boss.last_killed = new Date(date);\r\n        }\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const onExport = useCallback(() => {\r\n    exportData(bossList, serverTime);\r\n  }, [bossList, serverTime]);\r\n\r\n  const onResetAllTime = useCallback(() => {\r\n    setBossList(\r\n      produce((list: IBoss[]) => {\r\n        list.map((boss) => {\r\n          boss.last_killed = serverTime;\r\n\r\n          return boss;\r\n        });\r\n      })\r\n    );\r\n  }, [serverTime]);\r\n\r\n  useEffect(() => {\r\n    const boss = fetchBossList.result;\r\n\r\n    if (boss && Array.isArray(boss) && boss.length) {\r\n      const config = parseApiSavedData(boss[0].config);\r\n\r\n      const localConfig = getLocalConfigData();\r\n\r\n      console.warn('config', config.serverTime, config);\r\n\r\n      const serverTime = config.serverTime;\r\n\r\n      const bossList = config.bossList.map((boss: IBoss) => {\r\n        const localData: IBoss = localConfig.bossList.find(\r\n          ({ id }: IBoss) => id === boss.id\r\n        );\r\n\r\n        if (localData) {\r\n          const dbTime = new Date(boss.last_killed);\r\n          const lsTime = new Date(localData.last_killed);\r\n\r\n          if (dbTime > lsTime) {\r\n            boss.last_killed = dbTime;\r\n          } else {\r\n            boss.last_killed = lsTime;\r\n          }\r\n        }\r\n\r\n        return boss;\r\n      });\r\n\r\n      setServerTime(serverTime);\r\n      setBossList(bossList);\r\n    }\r\n  }, [fetchBossList.result]);\r\n\r\n  useEffect(() => {\r\n    if (serverTime && bossList.length) {\r\n      saveToLocalStorage$.next({\r\n        serverTime: new Date(serverTime).getTime(),\r\n        bossList: copyObject(bossList).map((boss: IBossJSON) => {\r\n          boss.last_killed = new Date(boss.last_killed).getTime();\r\n\r\n          return boss;\r\n        }),\r\n      });\r\n    }\r\n  }, [serverTime, bossList]);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        serverTime,\r\n        setServerTime,\r\n        updateKillTime,\r\n        onExport,\r\n        onResetAllTime,\r\n      }}\r\n    >\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Main bossList={bossList} />\r\n      </MuiPickersUtilsProvider>\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport gsheets from 'api/gsheets';\r\n\r\nimport { useFetch } from 'hooks';\r\n\r\nimport { store, history } from 'app/store';\r\n\r\nimport ErrorBoundary from './containers/errorboundary';\r\nimport Loader from 'containers/loader';\r\n\r\nimport App from './App';\r\n\r\nimport './index.css';\r\nimport './tailwind.css';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\n\r\nconst Main = () => {\r\n  const boss = useFetch(gsheets);\r\n\r\n  return (\r\n    <React.StrictMode>\r\n      <ErrorBoundary>\r\n        <BrowserRouter basename=\"/\">\r\n          <Provider store={store}>\r\n            <ConnectedRouter history={history}>\r\n              <Suspense fallback={<Loader />}>\r\n                <App fetchBossList={boss} />\r\n              </Suspense>\r\n            </ConnectedRouter>\r\n          </Provider>\r\n        </BrowserRouter>\r\n      </ErrorBoundary>\r\n    </React.StrictMode>\r\n  );\r\n};\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n"],"sourceRoot":""}